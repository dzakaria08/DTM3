input CreateProjectInput {
	projectId: ID!
	ownerId: String!
	projectTitle: String
	iFrameURL: AWSURL
	guests: [AWSEmail]
}

input DeleteProjectInput {
	projectId: ID!
	ownerId: String!
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

type Mutation {
	createProject(input: CreateProjectInput!): Project
	updateProject(input: UpdateProjectInput!): Project
	deleteProject(input: DeleteProjectInput!): Project
}

type Project {
	projectId: ID!
	ownerId: String!
	projectTitle: String
	iFrameURL: AWSURL
	guests: [AWSEmail]
}

type ProjectConnection {
	items: [Project]
	nextToken: String
}

type Query {
	getProject(projectId: ID!, ownerId: String!): Project
	listProjects(filter: TableProjectFilterInput, limit: Int, nextToken: String): ProjectConnection
}

type Subscription {
	onCreateProject(
		projectId: ID,
		ownerId: String,
		projectTitle: String,
		iFrameURL: AWSURL,
		guests: [AWSEmail]
	): Project
		@aws_subscribe(mutations: ["createProject"])
	onUpdateProject(
		projectId: ID,
		ownerId: String,
		projectTitle: String,
		iFrameURL: AWSURL,
		guests: [AWSEmail]
	): Project
		@aws_subscribe(mutations: ["updateProject"])
	onDeleteProject(
		projectId: ID,
		ownerId: String,
		projectTitle: String,
		iFrameURL: AWSURL,
		guests: [AWSEmail]
	): Project
		@aws_subscribe(mutations: ["deleteProject"])
}

input TableBooleanFilterInput {
	eq: Boolean
	ne: Boolean
}

input TableFloatFilterInput {
	between: [Float]
	contains: Float
	eq: Float
	ge: Float
	gt: Float
	le: Float
	lt: Float
	ne: Float
	notContains: Float
}

input TableIDFilterInput {
	beginsWith: ID
	between: [ID]
	contains: ID
	eq: ID
	ge: ID
	gt: ID
	le: ID
	lt: ID
	ne: ID
	notContains: ID
}

input TableIntFilterInput {
	between: [Int]
	contains: Int
	eq: Int
	ge: Int
	gt: Int
	le: Int
	lt: Int
	ne: Int
	notContains: Int
}

input TableProjectFilterInput {
	projectId: TableIDFilterInput
	ownerId: TableStringFilterInput
	projectTitle: TableStringFilterInput
	iFrameURL: TableStringFilterInput
	guests: TableStringFilterInput
}

input TableStringFilterInput {
	beginsWith: String
	between: [String]
	contains: String
	eq: String
	ge: String
	gt: String
	le: String
	lt: String
	ne: String
	notContains: String
}

input UpdateProjectInput {
	projectId: ID!
	ownerId: String!
	projectTitle: String
	iFrameURL: AWSURL
	guests: [AWSEmail]
}